{"ast":null,"code":"var _jsxFileName = \"/Users/muhammed/Full stack/Node/netflix/netflix/src/components/RowPost/RowPost.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './RowPost.css';\nimport { API_KEY, imageUrl } from '../../constants/constants';\nimport axios from '../../axios';\nimport Youtube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RowPost(props) {\n  _s();\n  const [Yurl, setYurl] = useState('');\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    axios.get(props.url).then(response => {\n      setMovies(response.data.results);\n    });\n  }, []);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleMovie = id => {\n    axios.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then(response => {\n      if (response.data.results.length !== 0) {\n        setYurl(response.data.results[0]);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: handleMovie(movie.id),\n        className: props.isSmall ? 'smallPoster' : 'poster',\n        src: `${imageUrl + movie.backdrop_path}`,\n        alt: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Youtube, {\n      opts: opts,\n      videoId: \"Yurl.key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(RowPost, \"6JZtS+jKtoX8SkW9LNe27Gu5HRo=\");\n_c = RowPost;\nexport default RowPost;\nvar _c;\n$RefreshReg$(_c, \"RowPost\");","map":{"version":3,"names":["React","useEffect","useState","API_KEY","imageUrl","axios","Youtube","jsxDEV","_jsxDEV","RowPost","props","_s","Yurl","setYurl","movies","setMovies","get","url","then","response","data","results","opts","height","width","playerVars","autoplay","handleMovie","id","length","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","onClick","isSmall","src","backdrop_path","alt","videoId","_c","$RefreshReg$"],"sources":["/Users/muhammed/Full stack/Node/netflix/netflix/src/components/RowPost/RowPost.js"],"sourcesContent":["import React, { useEffect,useState } from 'react'\nimport './RowPost.css'\nimport { API_KEY, imageUrl } from '../../constants/constants'\nimport axios from '../../axios'\nimport Youtube from 'react-youtube'\n\nfunction RowPost(props) {\n  const [Yurl,setYurl]=useState('')\n  const [movies, setMovies] = useState([])\n  useEffect(()=>{\n    axios.get(props.url).then((response)=>{\n      setMovies(response.data.results)\n    })\n\n  },[])\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n      },\n      };\n  const handleMovie=(id)=>{\n    axios.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then((response)=>{\n      if(response.data.results.length!==0){\n        setYurl(response.data.results[0])\n      }\n    })\n\n  }    \n  return (\n    <div className='row'>\n      <h2>{props.title}</h2>\n\n      <div className=\"posters\">\n        {\n          movies.map((movie)=>\n          <img onClick={handleMovie(movie.id)} className={props.isSmall?'smallPoster':'poster'} src={`${imageUrl+movie.backdrop_path}`} alt=\"poster\" />\n          )\n        }\n        \n      </div>\n    {  <Youtube opts={opts} videoId='Yurl.key'/>}\n    </div>\n  )\n}\n\nexport default RowPost\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AACjD,OAAO,eAAe;AACtB,SAASC,OAAO,EAAEC,QAAQ,QAAQ,2BAA2B;AAC7D,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,OAAO,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACX,QAAQ,CAAC,EAAE,CAAC;EACjC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxCD,SAAS,CAAC,MAAI;IACZI,KAAK,CAACW,GAAG,CAACN,KAAK,CAACO,GAAG,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAG;MACpCJ,SAAS,CAACI,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC;IAClC,CAAC,CAAC;EAEJ,CAAC,EAAC,EAAE,CAAC;EACL,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACVC,QAAQ,EAAE;IACV;EACA,CAAC;EACL,MAAMC,WAAW,GAAEC,EAAE,IAAG;IACtBvB,KAAK,CAACW,GAAG,CAAC,UAAUY,EAAE,mBAAmBzB,OAAO,iBAAiB,CAAC,CAACe,IAAI,CAAEC,QAAQ,IAAG;MAClF,IAAGA,QAAQ,CAACC,IAAI,CAACC,OAAO,CAACQ,MAAM,KAAG,CAAC,EAAC;QAClChB,OAAO,CAACM,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC;IACF,CAAC,CAAC;EAEJ,CAAC;EACD,oBACEb,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAAuB,QAAA,EAAKrB,KAAK,CAACsB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEtB5B,OAAA;MAAKsB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAEpBjB,MAAM,CAACuB,GAAG,CAAEC,KAAK,iBACjB9B,OAAA;QAAK+B,OAAO,EAAEZ,WAAW,CAACW,KAAK,CAACV,EAAE,CAAE;QAACE,SAAS,EAAEpB,KAAK,CAAC8B,OAAO,GAAC,aAAa,GAAC,QAAS;QAACC,GAAG,EAAE,GAAGrC,QAAQ,GAACkC,KAAK,CAACI,aAAa,EAAG;QAACC,GAAG,EAAC;MAAQ;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC5I;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGA,CAAC,eACL5B,OAAA,CAACF,OAAO;MAACgB,IAAI,EAAEA,IAAK;MAACsB,OAAO,EAAC;IAAU;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAACzB,EAAA,CAvCQF,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AAyChB,eAAeA,OAAO;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}